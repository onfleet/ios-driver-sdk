// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OnfleetDriver
import AFNetworking
import CommonCrypto
import CoreData
import CoreLocation
import CoreLocation/*.CLError*/
import CoreLocation/*.CLLocation*/
import CoreLocation/*.CLLocationCoordinate2D*/
import CoreLocation/*.CLRegion*/
import CoreTelephony
import Foundation
import MapKit
@_exported import OnfleetDriver
import RxSwift
import Swift
import UICKeyChainStore
@_exported import UIKit
import UserNotifications
import WidgetKit
public protocol UserInfoDecodable {
  init(userInfo: [Swift.AnyHashable : Any]) throws
}
public enum UserInfoDecodableError : Swift.Error {
  case invalidInput(desc: Swift.String)
  case unknownAction(provided: Swift.String)
}
extension OnfleetNotificationAction : OnfleetDriver.UserInfoDecodable {
  public init(userInfo: [Swift.AnyHashable : Any]) throws
}
public struct BarcodeRequest : Swift.Equatable {
  public var data: Swift.String?
  public var blockCompletion: Swift.Bool?
  public static func == (a: OnfleetDriver.BarcodeRequest, b: OnfleetDriver.BarcodeRequest) -> Swift.Bool
}
public protocol WorkTask : AnyObject, Swift.CustomDebugStringConvertible {
  var progress: Foundation.Progress { get }
  var isResumed: OnfleetDriver.Observable<Swift.Bool> { get }
  var isCancelled: OnfleetDriver.Observable<Swift.Bool> { get }
  var isFinished: OnfleetDriver.Observable<Swift.Bool> { get }
  var error: Foundation.NSError? { get }
  func resume()
  func cancel()
}
final public class CombinedWorkTask : OnfleetDriver.WorkTask {
  final public var progress: Foundation.Progress {
    get
  }
  final public var isResumed: OnfleetDriver.Observable<Swift.Bool>
  final public var isCancelled: OnfleetDriver.Observable<Swift.Bool>
  final public var isFinished: OnfleetDriver.Observable<Swift.Bool> {
    get
  }
  final public var error: Foundation.NSError? {
    get
  }
  final public let tasks: [OnfleetDriver.WorkTask]
  public init(tasks: [OnfleetDriver.WorkTask])
  final public func resume()
  final public func cancel()
  final public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
extension Array where Element == OnfleetDriver.NotificationToken {
  @discardableResult
  public mutating func addObserver(_ name: Foundation.Notification.Name?, object obj: Any?, queue: Foundation.OperationQueue?, using block: @escaping (Foundation.Notification) -> Swift.Void) -> OnfleetDriver.NotificationToken
}
final public class DispatchTimer {
  @objc deinit
  final public let timeInterval: Foundation.TimeInterval
  public init(timeInterval: Foundation.TimeInterval)
  final public var eventHandler: (() -> Swift.Void)?
  final public func resume()
  final public func suspend()
  final public func restart()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class InfoPlist : ObjectiveC.NSObject {
  @objc open class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc public static func URL(for key: Swift.String, in bundle: Foundation.Bundle) -> Foundation.URL
  @objc public static func string(forKey key: Swift.String, in bundle: Foundation.Bundle) -> Swift.String
  @objc public static func dictionary(forKey key: Swift.String, in bundle: Foundation.Bundle) -> [Swift.String : Swift.String]
  @objc public static func bundleId(in bundle: Foundation.Bundle) -> Swift.String
  @objc public static func bundleName(in bundle: Foundation.Bundle) -> Swift.String
  @objc public static func version(in bundle: Foundation.Bundle) -> Swift.String
  @objc public static func shortVersion(in bundle: Foundation.Bundle) -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
public protocol RemoteNotificationsProcessor : AnyObject {
  func canProcess(remoteNotification userInfo: [Swift.AnyHashable : Any]) -> Swift.Bool
  func process(remoteNotification userInfo: [Swift.AnyHashable : Any])
  func willPresent(notification: UserNotifications.UNNotification, completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  func didOpen(notification: UserNotifications.UNNotification, completionHandler: () -> Swift.Void)
}
@_hasMissingDesignatedInitializers final public class TimoutWorkTask : OnfleetDriver.WorkTask {
  final public var debugDescription: Swift.String {
    get
  }
  final public var progress: Foundation.Progress {
    get
  }
  final public var isResumed: OnfleetDriver.Observable<Swift.Bool>
  final public var isCancelled: OnfleetDriver.Observable<Swift.Bool>
  final public var isFinished: OnfleetDriver.Observable<Swift.Bool>
  final public var error: Foundation.NSError?
  final public func resume()
  final public func cancel()
  @objc deinit
}
final public class TimeoutCondition : OnfleetDriver.WorkTaskCondition {
  public init(timeout: Foundation.TimeInterval = 3, willFail: Swift.Bool = false)
  final public func beforeWork(completion: @escaping (OnfleetDriver.WorkTaskConditionResult) -> Swift.Void) -> OnfleetDriver.WorkTask
  final public func afterWork(result: OnfleetDriver.WorkTaskResult)
  final public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class DiskUtils : ObjectiveC.NSObject {
  @objc public static var diskHasFreeSpaceForImportantOperations: Swift.Bool {
    @objc get
  }
  @objc public static var diskHasFreeSpaceForCriticalOperations: Swift.Bool {
    @objc get
  }
  @objc public static var diskFreeSpace: Swift.UInt64 {
    @objc get
  }
  @objc public static var applicationSupportPath: Swift.String {
    @objc get
  }
  @objc public static var applicationSupportURL: Foundation.URL {
    @objc get
  }
  @objc public static var bundleApplicationSupportURL: Foundation.URL {
    @objc get
  }
  @objc public static var libraryURL: Foundation.URL {
    @objc get
  }
  @objc public static var documentsPath: Swift.String {
    @objc get
  }
  @objc public static var documentsURL: Foundation.URL {
    @objc get
  }
  @objc public static var cachesPath: Swift.String {
    @objc get
  }
  @objc public static var cachesURL: Foundation.URL {
    @objc get
  }
  @objc public static var bundleCachesURL: Foundation.URL {
    @objc get
  }
  @objc public static var temporaryPath: Swift.String {
    @objc get
  }
  @objc public static var temporaryURL: Foundation.URL {
    @objc get
  }
  @objc public static func sharedContainerURL(for appGroupId: Swift.String) -> Foundation.URL
  @objc public static func excludeFromBackup(forItemAt url: Foundation.URL) throws
  @objc deinit
  @objc override dynamic public init()
}
public struct HmacSignature {
  public enum Algorithm {
    case SHA256
    public static func == (a: OnfleetDriver.HmacSignature.Algorithm, b: OnfleetDriver.HmacSignature.Algorithm) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum Error : Swift.Error {
    case emptyMessageData
    case emptyKeyData
    public static func == (a: OnfleetDriver.HmacSignature.Error, b: OnfleetDriver.HmacSignature.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public static func sign(message: Swift.String, with key: Swift.String, using algorithm: OnfleetDriver.HmacSignature.Algorithm) throws -> Swift.String
  public static func sign(message: Foundation.Data, with key: Foundation.Data, using algorithm: OnfleetDriver.HmacSignature.Algorithm) throws -> Foundation.Data
}
public typealias Password = Swift.String
@objc @objcMembers public class PhoneNumber : ObjectiveC.NSObject {
  @objc final public let E164Formatted: Swift.String
  @objc final public let prettyPrinted: Swift.String
  @objc public init(E164: Swift.String, pretty: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
public struct ChatContact : Swift.Decodable {
  public let id: Swift.String
  public let organization: Swift.String
  public let type: Swift.String
  public let name: Swift.String
  public let timeLastSeen: Foundation.Date
  public init(from decoder: Swift.Decoder) throws
}
public typealias ChatContactsResult = Swift.Result<[OnfleetDriver.ChatContact], OnfleetDriver.HTTPError<OnfleetDriver.APIError>>
public struct ErrorFactory {
  public static func error(_ code: Swift.Int, _ description: Swift.String?, _ underlaying: Swift.Error? = nil) -> Swift.Error
}
public enum VehicleType : Swift.String, Swift.Encodable {
  case None
  case Car
  case Bicycle
  case Motorcycle
  case Truck
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Vehicle : OnfleetDriver.Model {
  public var vehicleDescription: OnfleetDriver.EquatableModelProperty<Swift.String>
  public var licensePlate: OnfleetDriver.EquatableModelProperty<Swift.String>
  public var color: OnfleetDriver.EquatableModelProperty<Swift.String>
  public var vehicleType: OnfleetDriver.EquatableModelProperty<OnfleetDriver.VehicleType>
  public func getDescription() -> Swift.String
  public func getLicensePlate() -> Swift.String
  public func getColor() -> Swift.String
  public func getVehicleType() -> OnfleetDriver.VehicleType
  @objc deinit
}
extension Collection {
  public var isNotEmpty: Swift.Bool {
    get
  }
}
extension PropertyListDecoder {
  public func decode<T>(_ type: T.Type, fromContentsOf url: Foundation.URL) throws -> T where T : Swift.Decodable
}
public protocol SensitiveFilesManaging : AnyObject {
  func removeAllSensitiveFiles()
}
public struct IntegrationOption : Swift.OptionSet {
  public let rawValue: Swift.UInt
  public init(rawValue: Swift.UInt)
  public static let none: OnfleetDriver.IntegrationOption
  public static let onDuty: OnfleetDriver.IntegrationOption
  public static let UIReady: OnfleetDriver.IntegrationOption
  public typealias Element = OnfleetDriver.IntegrationOption
  public typealias ArrayLiteralElement = OnfleetDriver.IntegrationOption
  public typealias RawValue = Swift.UInt
}
public protocol Integration {
  var isEnabled: Swift.Bool { get }
  var options: OnfleetDriver.IntegrationOption { get }
  func integrationWillBeInstalled()
  func integrationWasInstalled()
}
@objc public enum UserConsent : Swift.Int {
  case notDetermined
  case granted
  case denied
  public var isGranted: Swift.Bool {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public protocol UserConsentEnabledIntegration : OnfleetDriver.Integration {
  var requiresUserConsent: Swift.Bool { get }
  var userConsent: OnfleetDriver.UserConsent { get }
  func integrationWasDenied()
  func requestUserConsent(grantedHandler: @escaping (Swift.Bool) -> Swift.Void)
}
final public class OnLogoutSensitiveFilesRemover : OnfleetDriver.AccountsSubscriber {
  @objc weak final public var accountsProvider: OnfleetDriver.AccountsProvider?
  public init(remover: OnfleetDriver.SensitiveFilesRemover)
  @objc final public func accountsProvider(_ provider: OnfleetDriver.AccountsProvider, didLogOut reason: OnfleetDriver.LogoutReason)
  @objc deinit
}
public enum OnfleetNotificationAction {
  case taskAssigned(id: Swift.String)
  case tasksAssigned(count: Swift.Int)
  case taskUnassigned(id: Swift.String)
  case tasksUnassigned(count: Swift.Int)
  case activeTaskForceCompleted(id: Swift.String)
  case activeTaskUpdated(id: Swift.String)
  case workerForcedOffDutyByDispatcher
  case workerForcedOffDutyDueInactivity
  case newTasksAvailableForSelfAssignment(count: Swift.Int)
}
public struct SignStaticImageDetails : Swift.Encodable {
  public let latitude: Swift.Double
  public let longitude: Swift.Double
  public let size: CoreGraphics.CGSize
  public let scale: Swift.Double
  public let zoom: Swift.Int
  public let format: Swift.String
  public let style: Swift.String
  public init(latitude: Swift.Double, longitude: Swift.Double, size: CoreGraphics.CGSize, scale: Swift.Double, zoom: Swift.Int, format: Swift.String, style: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias SignStaticImageResult = Swift.Result<Foundation.URL, Swift.Error>
public protocol RegionMonitoringNotifier {
  func notifyOnExit(region: CoreLocation.CLRegion)
}
open class BlockWorkTask : OnfleetDriver.WorkTask {
  @objc deinit
  public var debugDescription: Swift.String {
    get
  }
  public var progress: Foundation.Progress {
    get
  }
  public var isResumed: OnfleetDriver.Observable<Swift.Bool>
  public var isCancelled: OnfleetDriver.Observable<Swift.Bool>
  public var isFinished: OnfleetDriver.Observable<Swift.Bool>
  public var error: Foundation.NSError?
  public init(block: @escaping (OnfleetDriver.BlockWorkTask) -> Swift.Void)
  public func resume()
  public func cancel()
}
@_hasMissingDesignatedInitializers public class MD5Hasher {
  public class func hash(string: Swift.String, salt: Swift.String?) -> Swift.String?
  @objc deinit
}
@objc public enum Environment : Swift.Int {
  case production = 0
  case staging
  case localhost
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension CLLocation : OnfleetDriver.ContentEquatable {
  public func isContentEqual(to other: CoreLocation.CLLocation) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Recipient : OnfleetDriver.Model {
  public var name: OnfleetDriver.EquatableModelProperty<Swift.String>
  public var phone: OnfleetDriver.EquatableModelProperty<Swift.String>
  public var notes: OnfleetDriver.EquatableOptionalModelProperty<Swift.String>
  public var skipSMSNotifications: OnfleetDriver.EquatableModelProperty<Swift.Bool>
  public var metadata: OnfleetDriver.EquatableOptionalModelProperty<[OnfleetDriver.Metadata]>
  public func getName() -> Swift.String
  public func getPhone() -> Swift.String
  public func getNotes() -> Swift.String?
  public func getSkipSMSNotifications() -> Swift.Bool
  public func getMatadata() -> [OnfleetDriver.Metadata]
  @objc deinit
}
@objc @objcMembers public class Config : ObjectiveC.NSObject {
  @objc final public let appKey: Swift.String
  @objc final public let appVersion: Swift.String
  @objc final public let appName: Swift.String
  @objc public init(appKey: Swift.String, appVersion: Swift.String, appName: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class DriverContext : ObjectiveC.NSObject {
  @objc public static let shared: OnfleetDriver.DriverContext
  final public let coreOutput: OnfleetDriver.CoreOutput
  @objc final public var config: OnfleetDriver.Config!
  final public func installIntegrations(_ integrations: [OnfleetDriver.Integration])
  @objc final public var environment: OnfleetDriver.Environment {
    @objc get
    @objc set
  }
  @objc final public var isInitialized: Swift.Bool {
    get
  }
  @objc final public func initSDK(with config: OnfleetDriver.Config, environment: OnfleetDriver.Environment, app: UIKit.UIApplication)
  @objc deinit
}
extension DriverContext {
  @objc final public var session: OnfleetDriver.SessionManaging {
    @objc get
  }
  final public var driverManager: OnfleetDriver.DriverManaging {
    get
  }
  final public var location: OnfleetDriver.LocationManaging {
    get
  }
  final public var attachments: OnfleetDriver.AttachmentsManaging {
    get
  }
  final public var completedTasks: OnfleetDriver.CompletedTasksProviding {
    get
  }
  @objc final public var deviceId: Swift.String {
    @objc get
  }
}
extension DriverContext {
  @objc final public func setRemoteNotificationsDeviceToken(_ data: Foundation.Data)
  @objc final public func canHandleRemoteNotification(_ userInfo: [Swift.AnyHashable : Any]) -> Swift.Bool
  @objc final public func handleRemoteNotification(userInfo: [Swift.AnyHashable : Any])
  @objc final public func handleRemoteNotification(userInfo: [Swift.AnyHashable : Any], fetchCompletionHandler handler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
}
extension DriverContext {
  @objc final public var isDataStale: Swift.Bool {
    @objc get
  }
  final public var dataState: OnfleetDriver.EquatableModelProperty<OnfleetDriver.DataState> {
    get
  }
  final public var fetchingState: OnfleetDriver.EquatableModelProperty<OnfleetDriver.FetchingState> {
    get
  }
  public typealias RefetchDataHandler = (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void
  public enum RefetchData : Swift.Error {
  }
  final public func refetchData(completion: OnfleetDriver.DriverContext.RefetchDataHandler?)
}
extension DriverContext {
  final public var analytics: OnfleetDriver.AnalyticsController {
    get
  }
  public typealias AuthorizeChatTaskHandler = (OnfleetDriver.AuthorizeChatResult) -> Swift.Void
  final public func authorizeChat(completion: @escaping OnfleetDriver.DriverContext.AuthorizeChatTaskHandler)
  public typealias ChatContactsTaskHandler = (OnfleetDriver.ChatContactsResult) -> Swift.Void
  final public func chatContacts(completion: @escaping OnfleetDriver.DriverContext.ChatContactsTaskHandler)
  public typealias SignStaticImageTaskHandler = (OnfleetDriver.SignStaticImageResult) -> Swift.Void
  final public func signStaticImage(_ details: OnfleetDriver.SignStaticImageDetails, completion: @escaping OnfleetDriver.DriverContext.SignStaticImageTaskHandler)
}
public enum StartTaskError : Swift.Error {
  case serviceNotAvailable(_: OnfleetDriver.APIError)
  case requirementsNotMet(_: OnfleetDriver.APIError)
  case taskCannotBeStarted(_: OnfleetDriver.APIError)
  case taskAlreadyStarted(_: OnfleetDriver.APIError)
  case driverOffDuty(_: OnfleetDriver.APIError)
  case http(_: OnfleetDriver.HTTPError<OnfleetDriver.APIError>)
  public var isTaskAlreadyStartedError: Swift.Bool {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
  public var apiError: OnfleetDriver.APIError? {
    get
  }
  public var httpError: OnfleetDriver.HTTPError<OnfleetDriver.APIError>? {
    get
  }
}
extension StartTaskError : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension NSNotification.Name {
  public static let sessionDidChangeActiveAccount: Foundation.Notification.Name
}
public typealias LogoutCompletionHandler = (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void
@objc public protocol SessionManaging : AnyObject {
  @objc var accounts: [OnfleetDriver.Account] { get }
  @objc var activeAccount: OnfleetDriver.Account? { get }
  @objc dynamic var isAuthenticated: Swift.Bool { get }
  @objc func changeActiveAccount(to account: OnfleetDriver.Account, completion: @escaping () -> Swift.Void)
  @objc func login(phoneNumber: OnfleetDriver.PhoneNumber, password: OnfleetDriver.Password, success: @escaping (OnfleetDriver.Password) -> Swift.Void, progress: @escaping (OnfleetDriver.AuthStatus) -> Swift.Void, failure: @escaping (Swift.Error) -> Swift.Void)
  @objc func logout(force: Swift.Bool, started: (() -> Swift.Void)?, success: (() -> Swift.Void)?, failure: ((Swift.Error) -> Swift.Void)?)
  @objc func resetPassword(phoneNumber: OnfleetDriver.PhoneNumber, success: @escaping () -> Swift.Void, failure: @escaping (Foundation.NSError) -> Swift.Void)
  @objc func respondToInvitation(account: OnfleetDriver.Account, response: OnfleetDriver.InvitationResponse, success: @escaping () -> Swift.Void, failure: @escaping (Swift.Error) -> Swift.Void)
}
public protocol ContentEquatable : Swift.Hashable {
  func isContentEqual(to other: Self) -> Swift.Bool
}
extension ContentEquatable {
  public func isContentEqual(to other: Self) -> Swift.Bool
}
extension String : OnfleetDriver.ContentEquatable {
}
extension Int : OnfleetDriver.ContentEquatable {
}
extension Double : OnfleetDriver.ContentEquatable {
}
extension Bool : OnfleetDriver.ContentEquatable {
}
extension Array : OnfleetDriver.ContentEquatable where Element : OnfleetDriver.ContentEquatable {
  public func isContentEqual(to other: [Element]) -> Swift.Bool
}
extension Optional : OnfleetDriver.ContentEquatable where Wrapped : OnfleetDriver.ContentEquatable {
  public func isContentEqual(to other: Wrapped?) -> Swift.Bool
}
extension Date : OnfleetDriver.ContentEquatable {
}
public typealias AccountInvitationResult = Swift.Result<Swift.Void, OnfleetDriver.HTTPError<OnfleetDriver.APIError>>
public protocol ObservableModel : AnyObject {
  var id: Swift.String { get }
  var timeLastModified: Foundation.Date { get }
  var timeCreated: Foundation.Date { get }
  func getChangeObservable(watchChildren: Swift.Bool) -> RxSwift.Observable<Swift.String>
  func getDeleteObservable() -> RxSwift.Observable<Swift.Void>
}
public protocol Driver : OnfleetDriver.ObservableModel {
  var name: Swift.String { get }
  var name$: OnfleetDriver.EquatableModelProperty<Swift.String> { get }
  var phone: Swift.String { get }
  var phone$: OnfleetDriver.EquatableModelProperty<Swift.String> { get }
  var image: Swift.String? { get }
  var image$: OnfleetDriver.EquatableOptionalModelProperty<Swift.String> { get }
  var onDuty: Swift.Bool { get }
  var onDuty$: OnfleetDriver.EquatableModelProperty<Swift.Bool> { get }
  var activeTask: OnfleetDriver.Task? { get }
  var activeTask$: OnfleetDriver.EquatableOptionalModelProperty<OnfleetDriver.Task> { get }
  var tasks: [OnfleetDriver.Task] { get }
  var tasks$: OnfleetDriver.ModelArrayModelProperty<OnfleetDriver.Task> { get }
  var vehicle: OnfleetDriver.Vehicle? { get }
  var vehicle$: OnfleetDriver.EquatableOptionalModelProperty<OnfleetDriver.Vehicle> { get }
  var organization: OnfleetDriver.Organization { get }
  var organization$: OnfleetDriver.EquatableModelProperty<OnfleetDriver.Organization> { get }
}
extension CLAuthorizationStatus : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers open class BlockBasedAsynchronousSerialOperationQueue<Model, Error> : OnfleetDriver.BlockBasedAsynchronousOperation<Model, Error> {
  public func addOperations(_ operations: [Foundation.Operation])
  override public func completeOperation(with result: OnfleetDriver.BlockBasedAsynchronousSerialOperationQueue<Model, Error>.Result)
  @objc override dynamic public func cancel()
  @objc deinit
  override public init(completion: OnfleetDriver.BlockBasedAsynchronousOperation<Model, Error>.Completion?)
}
@_hasMissingDesignatedInitializers public class FileHasher {
  public struct Hash {
    public var fileHash: Swift.String
    public var fileSize: Swift.UInt64
  }
  public class func hashForFile(at url: Foundation.URL) -> OnfleetDriver.FileHasher.Hash
  public class func hashForFile(at path: Swift.String) -> OnfleetDriver.FileHasher.Hash
  public class func hashForData(_ data: Foundation.Data) -> OnfleetDriver.FileHasher.Hash
  @objc deinit
}
public class Observation : Swift.Hashable {
  @objc deinit
  public init(invalidationBlock: @escaping (OnfleetDriver.Observation) -> Swift.Void)
  public func invalidate()
  public static func == (lhs: OnfleetDriver.Observation, rhs: OnfleetDriver.Observation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class GroupedObservation : OnfleetDriver.Observation {
  @objc deinit
  public init()
  final public func appendObservation(_ observation: OnfleetDriver.Observation)
  override final public func invalidate()
  override public init(invalidationBlock: @escaping (OnfleetDriver.Observation) -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class ModelProperty<T> {
  public var value: T {
    get
  }
  @discardableResult
  public func setValue(value: T) -> Swift.Bool
  public func getChangeObservable() -> RxSwift.Observable<T>
  public func dispose()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class EquatableModelProperty<T> : OnfleetDriver.ModelProperty<T> where T : Swift.Equatable {
  @discardableResult
  override public func setValue(value: T) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class EquatableOptionalModelProperty<T> : OnfleetDriver.ModelProperty<T?> where T : Swift.Equatable {
  @discardableResult
  override public func setValue(value: T?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class StringDictionaryModelProperty : OnfleetDriver.ModelProperty<[Swift.String : Swift.String]> {
  @discardableResult
  override public func setValue(value: [Swift.String : Swift.String]) -> Swift.Bool
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class Model : ObjectiveC.NSObject {
  @objc deinit
  public var id: Swift.String {
    get
  }
  public var timeLastModified: Foundation.Date {
    get
  }
  public var timeCreated: Foundation.Date {
    get
  }
  public func getChangeObservable(watchChildren: Swift.Bool) -> RxSwift.Observable<Swift.String>
  public func getDeleteObservable() -> RxSwift.Observable<Swift.Void>
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class ModelArray<T> where T : OnfleetDriver.Model {
  public func setArray(array: Swift.Array<T>) -> Swift.Bool
  public func getChangeObservable(watchChildren: Swift.Bool) -> RxSwift.Observable<Swift.String>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ModelArrayModelProperty<T> : OnfleetDriver.ModelProperty<OnfleetDriver.ModelArray<T>> where T : OnfleetDriver.Model {
  override public func setValue(value: OnfleetDriver.ModelArray<T>) -> Swift.Bool
  @objc deinit
}
public struct DriverProfileDetails : Swift.Encodable {
  public struct Vehicle : Swift.Encodable {
    public var description: Swift.String?
    public var licensePlate: Swift.String?
    public var color: Swift.String?
    public var type: OnfleetDriver.VehicleType
    public static var none: OnfleetDriver.DriverProfileDetails.Vehicle
    public static var bicycle: OnfleetDriver.DriverProfileDetails.Vehicle
    public static func car(description: Swift.String?, plate: Swift.String?, color: Swift.String?) -> OnfleetDriver.DriverProfileDetails.Vehicle
    public static func truck(description: Swift.String?, plate: Swift.String?, color: Swift.String?) -> OnfleetDriver.DriverProfileDetails.Vehicle
    public static func motorcycle(description: Swift.String?, plate: Swift.String?, color: Swift.String?) -> OnfleetDriver.DriverProfileDetails.Vehicle
    public func encode(to encoder: Swift.Encoder) throws
  }
  public var name: Swift.String?
  public var displayName: Swift.String?
  public var phone: Swift.String?
  public var image: OnfleetDriver.UniqueId?
  public var capacity: Swift.Int?
  public var vehicle: OnfleetDriver.DriverProfileDetails.Vehicle?
  public init()
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ImageAttachment : Swift.Codable {
  public let id: Swift.String
  public let location: OnfleetDriver.FileLocation
  public init(id: Swift.String, location: OnfleetDriver.FileLocation)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PhotoAttachments : Swift.Codable {
  public var images: [OnfleetDriver.ImageAttachment]
  public var urls: [Foundation.URL] {
    get
  }
  public init(_ images: [OnfleetDriver.ImageAttachment])
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SignatureAttachment : Swift.Codable {
  public let name: Swift.String
  public let image: OnfleetDriver.ImageAttachment
  public var url: Foundation.URL {
    get
  }
  public init(name: Swift.String, image: OnfleetDriver.ImageAttachment)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct TaskCompletionDetails {
  public enum AgeVerification {
    case dateOfBirth(Foundation.Date)
    case driverLicense(OnfleetDriver.DriverLicense)
  }
  public enum Result {
    case success
    case failure(_: Swift.String, _: Swift.String?)
  }
  public var result: OnfleetDriver.TaskCompletionDetails.Result
  public var notes: Swift.String?
  public var barcodes: [OnfleetDriver.Barcode]?
  public var signatureAttachment: OnfleetDriver.SignatureAttachment?
  public var photoAttachments: [OnfleetDriver.ImageAttachment]?
  public var ageVerification: OnfleetDriver.TaskCompletionDetails.AgeVerification?
  public init()
  public var attachmentIds: [Swift.String] {
    get
  }
}
extension URL {
  public var attributes: [Foundation.FileAttributeKey : Any]? {
    get
  }
  public var fileSize: Swift.UInt64 {
    get
  }
  public var formattedFileSize: Swift.String {
    get
  }
  public var creationDate: Foundation.Date? {
    get
  }
}
extension ContentsOfDirectoryRemover : OnfleetDriver.SensitiveFilesManaging {
  final public func removeAllSensitiveFiles()
}
extension DirectoryOrFileRemover : OnfleetDriver.SensitiveFilesManaging {
  final public func removeAllSensitiveFiles()
}
public enum DataState {
  case unavailable
  case error
  case valid(Foundation.Date)
}
extension DataState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension DataState : Swift.Equatable {
}
public func == (a: OnfleetDriver.DataState, b: OnfleetDriver.DataState) -> Swift.Bool
public enum FetchingState {
  case idle
  case fetching(byUser: Swift.Bool, reason: Swift.String)
}
extension FetchingState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension FetchingState : Swift.Equatable {
}
public func == (a: OnfleetDriver.FetchingState, b: OnfleetDriver.FetchingState) -> Swift.Bool
extension NSNotification.Name {
  public static let modelManagerDidFetchCollectionsNotification: Foundation.Notification.Name
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class ModelManager : ObjectiveC.NSObject {
  @objc public static let sharedInstance: OnfleetDriver.ModelManager
  @objc public func applyDiffUpdate(_ update: [Swift.String : Any])
  @objc deinit
}
public typealias AnalyticsPeriodParameters = (start: Foundation.Date, end: Foundation.Date, duration: OnfleetDriver.AnalyticsPeriodDuration, numberOfDays: Swift.Int)
public enum RecipientContactMode {
  case VoiceCall
  case SMS
  public static func == (a: OnfleetDriver.RecipientContactMode, b: OnfleetDriver.RecipientContactMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Task : OnfleetDriver.Model {
  @objc @_hasMissingDesignatedInitializers public class Requirements : ObjectiveC.NSObject {
    public var signature: Swift.Bool
    public var notes: Swift.Bool
    public var photo: Swift.Bool
    public var minimumAge: Swift.Int?
    @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
    @objc deinit
    @objc override dynamic public init()
  }
  public var notes: OnfleetDriver.EquatableOptionalModelProperty<Swift.String>
  public var shortId: OnfleetDriver.EquatableModelProperty<Swift.String>
  public var completeAfter: OnfleetDriver.EquatableOptionalModelProperty<Foundation.Date>
  public var completeBefore: OnfleetDriver.EquatableOptionalModelProperty<Foundation.Date>
  public var destination: OnfleetDriver.EquatableModelProperty<OnfleetDriver.Destination>
  public var recipients: OnfleetDriver.ModelArrayModelProperty<OnfleetDriver.Recipient>
  public var isActive: OnfleetDriver.EquatableModelProperty<Swift.Bool>
  public var pickupTask: OnfleetDriver.EquatableModelProperty<Swift.Bool>
  public var commConfig: OnfleetDriver.StringDictionaryModelProperty
  public var requirements: OnfleetDriver.EquatableModelProperty<OnfleetDriver.Task.Requirements>
  public var overrides: OnfleetDriver.StringDictionaryModelProperty
  public var requestedBarcodes: OnfleetDriver.EquatableOptionalModelProperty<[OnfleetDriver.BarcodeRequest]>
  public var isFulfilled: OnfleetDriver.EquatableModelProperty<Swift.Bool>
  public var organization: OnfleetDriver.EquatableModelProperty<Swift.String>
  public var executor: OnfleetDriver.EquatableModelProperty<Swift.String>
  public var quantity: OnfleetDriver.EquatableOptionalModelProperty<Swift.Float>
  public var metadata: OnfleetDriver.EquatableOptionalModelProperty<[OnfleetDriver.Metadata]>
  public var isSelfAssignable: OnfleetDriver.EquatableModelProperty<Swift.Bool>
  public var isSelfAssigned: OnfleetDriver.EquatableModelProperty<Swift.Bool>
  public var scanOnlyRequiredBarcodes: OnfleetDriver.EquatableModelProperty<Swift.Bool>
  public var hasRecipientSignature: OnfleetDriver.EquatableModelProperty<Swift.Bool>
  public static func empty() -> OnfleetDriver.Task
  public func getDestination() -> OnfleetDriver.Destination
  public func getRecipients() -> Swift.Array<OnfleetDriver.Recipient>
  public var hasRecipients: Swift.Bool {
    get
  }
  public func getNotes() -> Swift.String?
  public func getShortId() -> Swift.String
  public func getCompleteBefore() -> Foundation.Date?
  public func getCompleteAfter() -> Foundation.Date?
  public func getIsActive() -> Swift.Bool
  public func getPickupTask() -> Swift.Bool
  public func getCommConfig() -> Swift.Dictionary<Swift.String, Swift.String>
  public func getOverrides() -> Swift.Dictionary<Swift.String, Swift.String>
  public func getRequestedBarcodes() -> [OnfleetDriver.BarcodeRequest]?
  public func hasAttachedBarcodes() -> Swift.Bool
  public func attachedBarcodesCount() -> Swift.Int
  public func getIsFulfilled() -> Swift.Bool
  public func getScanOnlyRequiredBarcodes() -> Swift.Bool
  public func getIsSameOrgAsCreator() -> Swift.Bool
  public func getQuantity() -> Swift.Float?
  public func getRequirements() -> OnfleetDriver.Task.Requirements
  public func getMetadata() -> [OnfleetDriver.Metadata]
  public func getIsSelfAssignable() -> Swift.Bool
  public func getIsSelfAssigned() -> Swift.Bool
  public func getNameForRecipient(index: Swift.Int) -> Swift.String?
  public func getNameForPreferredRecipient() -> Swift.String?
  public func getNotesForRecipient(index: Swift.Int) -> Swift.String?
  public func getNotesForPreferredRecipient() -> Swift.String?
  public func getPhoneNumberForPreferredRecipient(mode: OnfleetDriver.RecipientContactMode, onlyProxy: Swift.Bool = false) -> Swift.String?
  public func getPhoneNumberForRecipient(index: Swift.Int, mode: OnfleetDriver.RecipientContactMode, onlyProxy: Swift.Bool) -> Swift.String?
  public func getHasRecipientMetadata() -> Swift.Bool
  public func getHasRecipientSignature() -> Swift.Bool
  public func beginVoiceCallForRecipient(index: Swift.Int) throws
  @objc deinit
}
final public class ContentsOfDirectoryRemover {
  public init(directoryUrl: Foundation.URL)
  final public func remove()
  @objc deinit
}
@objc public protocol AccountsProvider : AnyObject {
  @objc var isLoggedIn: Swift.Bool { get }
  @objc var preferred: OnfleetDriver.Account? { get }
  @objc func subscribeTo(accountsProvider subscriber: OnfleetDriver.AccountsSubscriber)
  @objc func removeSubscriberFrom(accountsProvider subscriber: OnfleetDriver.AccountsSubscriber)
}
@objc public protocol AccountsSubscriber : AnyObject {
  @objc weak var accountsProvider: OnfleetDriver.AccountsProvider? { get set }
  @objc optional func accountsProvider(_ provider: OnfleetDriver.AccountsProvider, didRemove account: OnfleetDriver.Account)
  @objc optional func accountsProviderDidLogIn(_ provider: OnfleetDriver.AccountsProvider, isLegacy: Swift.Bool)
  @objc optional func accountsProvider(_ provider: OnfleetDriver.AccountsProvider, didFailLoggingInWith error: Swift.Error, isLegacy: Swift.Bool)
  @objc optional func accountsProvider(_ provider: OnfleetDriver.AccountsProvider, didLogOut reason: OnfleetDriver.LogoutReason)
  @objc optional func accountsProvider(_ provider: OnfleetDriver.AccountsProvider, didChangePreferredAccount old: OnfleetDriver.Account?, new: OnfleetDriver.Account)
}
public protocol DriverProvider : AnyObject {
  var driver: OnfleetDriver.Driver? { get }
  var isOnDuty: Swift.Bool { get }
  func subscribeToDriverProvider(_ subscriber: OnfleetDriver.DriverSubscriber)
  func removeSubscriberFrom(ownWorkerProvider subscriber: OnfleetDriver.DriverSubscriber)
}
public protocol DriverSubscriber : AnyObject {
  var driverProvider: OnfleetDriver.DriverProvider? { get set }
  func driverProvider(_ provider: OnfleetDriver.DriverProvider, didChangeDutyStatus onDuty: Swift.Bool)
  func driverProvider(_ provider: OnfleetDriver.DriverProvider, didFailChangingDutyStatusTo onDuty: Swift.Bool, with error: Swift.Error)
  func driverProvider(_ provider: OnfleetDriver.DriverProvider, driverDidBecomeAvailable driver: OnfleetDriver.Driver)
  func driverProvider(_ provider: OnfleetDriver.DriverProvider, driverDidUpdate driver: OnfleetDriver.Driver)
  func driverProviderDidUpdateProfile(_ provider: OnfleetDriver.DriverProvider)
}
extension DriverSubscriber {
  public func driverProvider(_ provider: OnfleetDriver.DriverProvider, didChangeDutyStatus onDuty: Swift.Bool)
  public func driverProvider(_ provider: OnfleetDriver.DriverProvider, didFailChangingDutyStatusTo onDuty: Swift.Bool, with error: Swift.Error)
  public func driverProvider(_ provider: OnfleetDriver.DriverProvider, driverDidBecomeAvailable driver: OnfleetDriver.Driver)
  public func driverProvider(_ provider: OnfleetDriver.DriverProvider, driverDidUpdate driver: OnfleetDriver.Driver)
  public func driverProviderDidUpdateProfile(_ provider: OnfleetDriver.DriverProvider)
}
@objc public protocol ActiveTaskProvider : AnyObject {
  @objc var activeTask: OnfleetDriver.Task? { get }
  @objc func subscribeTo(activeTaskProvider subscriber: OnfleetDriver.ActiveTaskSubscriber)
  @objc func removeSubscriberFrom(activeTaskProvider subscriber: OnfleetDriver.ActiveTaskSubscriber)
}
@objc public protocol ActiveTaskSubscriber : AnyObject {
  @objc weak var activeTaskProvider: OnfleetDriver.ActiveTaskProvider? { get set }
  @objc optional func activeTaskProviderDidStartTask(_ provider: OnfleetDriver.ActiveTaskProvider)
  @objc optional func activeTaskProviderDidCompleteActiveTask(_ provider: OnfleetDriver.ActiveTaskProvider)
}
@_hasMissingDesignatedInitializers final public class CoreOutput : OnfleetDriver.AccountsProvider, OnfleetDriver.DriverProvider, OnfleetDriver.ActiveTaskProvider {
  @objc final public var isLoggedIn: Swift.Bool {
    @objc get
  }
  @objc final public var preferred: OnfleetDriver.Account? {
    @objc get
  }
  @objc final public func subscribeTo(accountsProvider subscriber: OnfleetDriver.AccountsSubscriber)
  @objc final public func removeSubscriberFrom(accountsProvider subscriber: OnfleetDriver.AccountsSubscriber)
  final public var driver: OnfleetDriver.Driver? {
    get
  }
  final public var isOnDuty: Swift.Bool {
    get
  }
  final public func subscribeToDriverProvider(_ subscriber: OnfleetDriver.DriverSubscriber)
  final public func removeSubscriberFrom(ownWorkerProvider subscriber: OnfleetDriver.DriverSubscriber)
  @objc final public var activeTask: OnfleetDriver.Task? {
    @objc get
  }
  @objc final public func subscribeTo(activeTaskProvider subscriber: OnfleetDriver.ActiveTaskSubscriber)
  @objc final public func removeSubscriberFrom(activeTaskProvider subscriber: OnfleetDriver.ActiveTaskSubscriber)
  @objc deinit
}
@objc final public class NotificationToken : ObjectiveC.NSObject {
  @objc deinit
  final public let notificationCenter: Foundation.NotificationCenter
  public init(notificationCenter: Foundation.NotificationCenter = .default, token: Any)
  @objc override dynamic public init()
}
extension NotificationCenter {
  public func observe(_ name: Foundation.Notification.Name?, object obj: Any?, queue: Foundation.OperationQueue?, using block: @escaping (Foundation.Notification) -> Swift.Void) -> OnfleetDriver.NotificationToken
  public class func observe(_ name: Foundation.Notification.Name?, object obj: Any?, queue: Foundation.OperationQueue?, using block: @escaping (Foundation.Notification) -> Swift.Void) -> OnfleetDriver.NotificationToken
}
public enum WorkTaskConditionResult {
  case accepted
  case cancelled(reason: Swift.Error)
}
public enum WorkTaskResult {
  case succeeded
  case failed(reason: Swift.Error)
}
public protocol WorkTaskCondition : AnyObject, Swift.CustomDebugStringConvertible {
  func beforeWork(completion: @escaping (OnfleetDriver.WorkTaskConditionResult) -> Swift.Void) -> OnfleetDriver.WorkTask
  func afterWork(result: OnfleetDriver.WorkTaskResult)
}
open class ConditionalWorkTask : OnfleetDriver.WorkTask {
  open var debugDescription: Swift.String {
    get
  }
  public var progress: Foundation.Progress {
    get
  }
  public var isResumed: OnfleetDriver.Observable<Swift.Bool>
  public var isCancelled: OnfleetDriver.Observable<Swift.Bool>
  public var isFinished: OnfleetDriver.Observable<Swift.Bool>
  public var error: Foundation.NSError?
  public init(task: OnfleetDriver.WorkTask, conditions: [OnfleetDriver.WorkTaskCondition], completion: @escaping (OnfleetDriver.WorkTaskConditionResult) -> Swift.Void)
  public func resume()
  public func cancel()
  @objc deinit
}
extension UIDevice.BatteryState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(iOS 11.0, *)
extension ProcessInfo.ThermalState : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
open class BlockBasedAsynchronousOperation<Model, Error> : OnfleetDriver.AsynchronousOperation {
  public typealias Result = OnfleetDriver.AnynchronousOperationResult<Model, Error>
  public typealias Completion = (OnfleetDriver.BlockBasedAsynchronousOperation<Model, Error>.Result) -> Swift.Void
  public var result: OnfleetDriver.BlockBasedAsynchronousOperation<Model, Error>.Result {
    get
  }
  public init(completion: OnfleetDriver.BlockBasedAsynchronousOperation<Model, Error>.Completion?)
  open func completeOperation(with result: OnfleetDriver.BlockBasedAsynchronousOperation<Model, Error>.Result)
  override public func completeOperation()
  @objc override dynamic public init()
  @objc deinit
}
extension Task : OnfleetDriver.ContentEquatable {
  public func isContentEqual(to other: OnfleetDriver.Task) -> Swift.Bool
}
open class Observable<T> where T : OnfleetDriver.ContentEquatable {
  public struct Change<T> where T : OnfleetDriver.ContentEquatable {
    public let newValue: T
    public let oldValue: T
    public func isChanged<Value>(_ path: Swift.KeyPath<T, Value>) -> Swift.Bool where Value : OnfleetDriver.ContentEquatable
    public let isInitial: Swift.Bool
    public init(_ newValue: T, _ oldValue: T, initial: Swift.Bool = false)
  }
  public typealias ObservationBlock = (OnfleetDriver.Observable<T>.Change<T>) -> Swift.Void
  public typealias KeyPathObservationBlock<T> = (OnfleetDriver.Observable<T>.Change<T>) -> Swift.Void where T : OnfleetDriver.ContentEquatable
  public init(_ value: T)
  public var notifyWhenChanged: Swift.Bool
  public var value: T {
    get
    set
  }
  public func setDeferred(_ newValue: T)
  public func commitDeferred()
  public func observe(_ block: @escaping OnfleetDriver.Observable<T>.ObservationBlock) -> OnfleetDriver.Observation
  public func startObserving(_ block: @escaping OnfleetDriver.Observable<T>.ObservationBlock) -> OnfleetDriver.Observation
  public func startObservingKeyPath<Value>(_ keyPath: Swift.KeyPath<T, Value>, completion: @escaping OnfleetDriver.Observable<T>.KeyPathObservationBlock<Value>) -> OnfleetDriver.Observation where Value : OnfleetDriver.ContentEquatable
  public func observeKeyPath<Value>(_ keyPath: Swift.KeyPath<T, Value>, completion: @escaping OnfleetDriver.Observable<T>.KeyPathObservationBlock<Value>) -> OnfleetDriver.Observation where Value : OnfleetDriver.ContentEquatable
  @objc deinit
}
public enum AnynchronousOperationResult<Model, Error> {
  case notDetermined
  case success(Model)
  case failure(Error)
  case cancel
  public var isSuccess: Swift.Bool {
    get
  }
  public var isFailure: Swift.Bool {
    get
  }
  public var isCancelled: Swift.Bool {
    get
  }
  public var model: Model? {
    get
  }
}
extension AnynchronousOperationResult where Error == Foundation.NSError {
  public func resolve() throws -> Model
  public var error: Foundation.NSError? {
    get
  }
}
extension AnynchronousOperationResult : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@objc public enum LogoutReason : Swift.Int, Swift.Error {
  case userInitiated
  case userInitiatedByForce
  case rejectedAccountInvitation
  case invalidAuthentication
  case noDriver
  case noOrganization
  case accountRemoved
  case organizationSuspended
  case activityOnOtherDevice
  public var isForced: Swift.Bool {
    get
  }
  public var isImplicit: Swift.Bool {
    get
  }
  public var isExplicit: Swift.Bool {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
extension LogoutReason : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc public enum InvitationResponse : Swift.Int {
  case accept, reject
  public var isAccepted: Swift.Bool {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AccountsController : ObjectiveC.NSObject, OnfleetDriver.SessionManaging {
  @objc public static let shared: OnfleetDriver.AccountsController
  @objc public var accounts: [OnfleetDriver.Account] {
    @objc get
    @objc set
  }
  @objc public var activeAccount: OnfleetDriver.Account? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public func forceImmediateLogout(reason: OnfleetDriver.LogoutReason)
  @objc public func setAccessToken(_ token: Swift.String, on account: OnfleetDriver.Account)
  @objc dynamic public var isAuthenticated: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension AccountsController {
  @objc dynamic public func respondToInvitation(account: OnfleetDriver.Account, response: OnfleetDriver.InvitationResponse, success: @escaping () -> Swift.Void, failure: @escaping (Swift.Error) -> Swift.Void)
}
extension AccountsController {
  @objc dynamic public func changeActiveAccount(to account: OnfleetDriver.Account, completion: @escaping () -> Swift.Void)
}
extension AccountsController {
  @objc dynamic public func login(phoneNumber: OnfleetDriver.PhoneNumber, password: OnfleetDriver.Password, success: @escaping (OnfleetDriver.Password) -> Swift.Void, progress: @escaping (OnfleetDriver.AuthStatus) -> Swift.Void, failure: @escaping (Swift.Error) -> Swift.Void)
  @objc dynamic public func logout(force: Swift.Bool, started: (() -> Swift.Void)?, success: (() -> Swift.Void)?, failure: ((Swift.Error) -> Swift.Void)?)
  @objc dynamic public func resetPassword(phoneNumber: OnfleetDriver.PhoneNumber, success: @escaping () -> Swift.Void, failure: @escaping (Foundation.NSError) -> Swift.Void)
}
final public class Analytics {
  final public var totalTasks: Swift.Int {
    get
    set
  }
  final public var totalHoursOnDuty: Swift.Double {
    get
    set
  }
  final public var timePerTask: Swift.Double {
    get
    set
  }
  final public var distancePerTask: Swift.Double {
    get
    set
  }
  final public var serviceTimePerTask: Swift.Double {
    get
    set
  }
  final public var completedTasksByDelayTime: [(Swift.String, Swift.Double)] {
    get
    set
  }
  final public var totalCompletedTasks: ([Swift.String : Swift.Double], [Swift.Double]) {
    get
    set
  }
  final public var totalMetersDriven: ([Swift.String : Swift.Double], [Swift.Double]) {
    get
    set
  }
  final public var metersDrivenByActivityType: [(Swift.String, Swift.Double)] {
    get
    set
  }
  final public var hoursSpentByActivityType: [(Swift.String, Swift.Double)] {
    get
    set
  }
  public init(rawData: [Swift.String : Any])
  @objc deinit
}
extension Data {
  public var hexString: Swift.String {
    get
  }
}
public struct Address {
  public var name: Swift.String?
  public var apartment: Swift.String?
  public var number: Swift.String?
  public var street: Swift.String?
  public var city: Swift.String
  public var country: Swift.String
  public var postalCode: Swift.String?
  public var state: Swift.String?
}
@objc final public class AsynchronousClosureOperation : OnfleetDriver.AsynchronousOperation {
  public init(_ closure: @escaping (OnfleetDriver.AsynchronousOperation) -> Swift.Void)
  override final public func execute()
  @objc override dynamic public init()
  @objc deinit
}
public enum SelfAssignTaskError : Swift.Error {
  case serviceNotAvailable(_: OnfleetDriver.APIError)
  case requirementsNotMet(_: OnfleetDriver.APIError)
  case taskCannotBeStarted(_: OnfleetDriver.APIError)
  case taskAlreadyStarted(_: OnfleetDriver.APIError)
  case driverOffDuty(_: OnfleetDriver.APIError)
  case http(_: OnfleetDriver.HTTPError<OnfleetDriver.APIError>)
  public var isTaskAlreadyStartedError: Swift.Bool {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
  public var apiError: OnfleetDriver.APIError? {
    get
  }
  public var httpError: OnfleetDriver.HTTPError<OnfleetDriver.APIError>? {
    get
  }
}
extension SelfAssignTaskError : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public typealias AuthorizeChatResult = Swift.Result<Swift.String, OnfleetDriver.HTTPError<OnfleetDriver.APIError>>
public struct DriverLicense : Swift.Codable {
  public var id: Swift.String?
  public var documentType: Swift.String?
  public var issuingCountry: Swift.String?
  public var dob: Swift.String?
  public var dateIssued: Swift.String?
  public var expirationDate: Swift.String?
  public var firstname: Swift.String?
  public var middleName: Swift.String?
  public var lastName: Swift.String?
  public init()
  public var dateOfBirth: Foundation.Date? {
    get
  }
  public func stringToDate(date: Swift.String?) -> Foundation.Date?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias CompletedTasksHandler = (Swift.Result<[OnfleetDriver.CompletedTask], Swift.Error>) -> Swift.Void
public protocol CompletedTasksProviding : AnyObject {
  var loading$: OnfleetDriver.EquatableModelProperty<Swift.Bool> { get }
  var isLoading: Swift.Bool { get }
  var outdated$: OnfleetDriver.EquatableModelProperty<Swift.Bool> { get }
  var isOutdated: Swift.Bool { get }
  var error: Swift.Error? { get }
  var tasks: [OnfleetDriver.CompletedTask] { get }
  func loadTasks(from: Foundation.Date, forceRefetch: Swift.Bool, completion: @escaping OnfleetDriver.CompletedTasksHandler)
}
public enum HTTPError<E> : Swift.Error where E : Swift.Decodable, E : Swift.Error {
  case api(_: E)
  case http(_: Foundation.NSError)
  case parsing(_: Swift.Error)
}
extension HTTPError where E == OnfleetDriver.APIError {
  public var isConnectionError: Swift.Bool {
    get
  }
  public var isBadRequestError: Swift.Bool {
    get
  }
}
extension HTTPError where E == OnfleetDriver.APIError {
  public var localizedDescription: Swift.String {
    get
  }
}
extension HTTPError : Swift.CustomDebugStringConvertible where E == OnfleetDriver.APIError {
  public var debugDescription: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers open class FrameworkInfo : ObjectiveC.NSObject {
  @objc open class var frameworkBundle: Foundation.Bundle {
    @objc get
  }
  @objc public static var formattedVersion: Swift.String {
    @objc get
  }
  @objc public static var bundleId: Swift.String {
    @objc get
  }
  @objc public static var versionLong: Swift.String {
    @objc get
  }
  @objc public static var versionShort: Swift.String {
    @objc get
  }
  @objc public static func httpBaseURL(for environment: OnfleetDriver.Environment) -> Foundation.URL
  @objc public static func wsBaseURL(for environment: OnfleetDriver.Environment) -> Foundation.URL
  @objc public static var appGroupId: Swift.String
  @objc deinit
  @objc override dynamic public init()
}
extension NSURLRequest {
  @objc dynamic public var curlRepresentation: Swift.String {
    @objc get
  }
}
public typealias UniqueId = Swift.String
public protocol Identifiable {
  var id: OnfleetDriver.UniqueId { get }
}
public struct APIError : Swift.Error {
}
extension APIError : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension APIError : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public enum AnalyticsPeriod : Swift.RawRepresentable {
  case today, yesterday, week, month, year
  case custom(Foundation.Date, Foundation.Date)
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
extension AnalyticsPeriod : Swift.Equatable {
  public static func == (lhs: OnfleetDriver.AnalyticsPeriod, rhs: OnfleetDriver.AnalyticsPeriod) -> Swift.Bool
}
extension AnalyticsPeriod : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
}
extension AnalyticsPeriod {
  public static var defaultPeriod: OnfleetDriver.AnalyticsPeriod {
    get
  }
  public static var allSortedChronologically: [OnfleetDriver.AnalyticsPeriod] {
    get
  }
  public static var upToMonthSortedChronologically: [OnfleetDriver.AnalyticsPeriod] {
    get
  }
  public static var upToWeekSortedChronologically: [OnfleetDriver.AnalyticsPeriod] {
    get
  }
  public static var daySortedChronologically: [OnfleetDriver.AnalyticsPeriod] {
    get
  }
}
extension Data {
  public mutating func append(_ string: Swift.String, using encoding: Swift.String.Encoding = .utf8) throws
}
public enum DutyStatusError : Swift.Error {
  case locationPermissionsDenied(_: Swift.Error)
  case activeTaskInOtherAccount(_: OnfleetDriver.APIError)
  case http(_: OnfleetDriver.HTTPError<OnfleetDriver.APIError>)
  public var localizedDescription: Swift.String {
    get
  }
  public var isLocationPermissionsDeniedError: Swift.Bool {
    get
  }
  public var httpError: OnfleetDriver.HTTPError<OnfleetDriver.APIError>? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class Organization : OnfleetDriver.Model {
  @objc @_hasMissingDesignatedInitializers public class Billing : ObjectiveC.NSObject {
    final public let legacyPlan: Swift.Bool
    final public let testMode: Swift.Bool
    final public let analyticsPeriodDuration: Swift.Int
    @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
    @objc deinit
    @objc override dynamic public init()
  }
  public var name: OnfleetDriver.EquatableModelProperty<Swift.String>
  public var country: OnfleetDriver.EquatableModelProperty<Swift.String>
  public var image: OnfleetDriver.EquatableOptionalModelProperty<Swift.String>
  public var config: OnfleetDriver.StringDictionaryModelProperty
  public var driverAppConfig: OnfleetDriver.StringDictionaryModelProperty
  public var enabledFeatures: OnfleetDriver.StringDictionaryModelProperty
  public var billing: OnfleetDriver.EquatableModelProperty<OnfleetDriver.Organization.Billing>
  @objc public func getName() -> Swift.String
  @objc public func getCountry() -> Swift.String
  @objc public func getImage() -> Swift.String?
  @objc public func getOrgConfig() -> Swift.Dictionary<Swift.String, Swift.String>
  @objc public func getAppConfig() -> Swift.Dictionary<Swift.String, Swift.String>
  @objc public func getEnabledFeatures() -> Swift.Dictionary<Swift.String, Swift.String>
  @objc public func getBilling() -> OnfleetDriver.Organization.Billing
  @objc deinit
}
public enum UnitSystem {
  case metric
  case imperial
  public var isMetric: Swift.Bool {
    get
  }
  public static func == (a: OnfleetDriver.UnitSystem, b: OnfleetDriver.UnitSystem) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension Organization {
  public func getOrgConfigProperty<T>(_ type: T.Type, key: Swift.String) -> T?
  public func getOrgConfigPreferredUnitType() -> OnfleetDriver.UnitSystem?
}
final public class DirectoryOrFileRemover {
  public init(url: Foundation.URL)
  final public func remove()
  @objc deinit
}
public struct OnfleetInfo {
  public static var bundle: Foundation.Bundle {
    get
  }
  public static var formattedVersion: Swift.String {
    get
  }
  public static var bundleId: Swift.String {
    get
  }
  public static var versionLong: Swift.String {
    get
  }
  public static var versionShort: Swift.String {
    get
  }
}
extension NSNotification.Name {
  public static let locationAuthorizationDenied: Foundation.Notification.Name
  public static let lastLocationChanged: Foundation.Notification.Name
}
public protocol LocationManaging : AnyObject {
  var lastLocation$: OnfleetDriver.ModelProperty<CoreLocation.CLLocation?> { get }
  var lastLocation: CoreLocation.CLLocation? { get }
  var isFullyAuthorized$: OnfleetDriver.EquatableModelProperty<Swift.Bool> { get }
  var isFullyAuthorized: Swift.Bool { get }
  var isFullAccuracyGranted$: OnfleetDriver.EquatableModelProperty<Swift.Bool> { get }
  var isFullAccuracyGranted: Swift.Bool { get }
  var isAuthorizedAlways$: OnfleetDriver.EquatableModelProperty<Swift.Bool> { get }
  var isAuthorizedAlways: Swift.Bool { get }
}
public struct Metadata : Swift.Hashable {
  public enum ValueType : Swift.String {
    case string, boolean, number, array, object, other
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Visibility : Swift.String {
    case api, dashboard, worker, other
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public var name: Swift.String
  public var type: OnfleetDriver.Metadata.ValueType
  public var subtype: OnfleetDriver.Metadata.ValueType?
  public var visibility: [OnfleetDriver.Metadata.Visibility]
  public var value: Any?
  public var valueHash: Swift.Int
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: OnfleetDriver.Metadata, rhs: OnfleetDriver.Metadata) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum CompleteTaskError : Swift.Error {
  case taskNotActive(_: Swift.Error)
  case taskAlreadyCompleted(_: OnfleetDriver.APIError)
  case missingProperties(_: OnfleetDriver.APIError)
  case invalidValues(_: OnfleetDriver.APIError)
  case http(_: OnfleetDriver.HTTPError<OnfleetDriver.APIError>)
  public var localizedDescription: Swift.String {
    get
  }
  public var isTaskAlreadyCompletedError: Swift.Bool {
    get
  }
  public var httpError: OnfleetDriver.HTTPError<OnfleetDriver.APIError>? {
    get
  }
}
public enum ImagePreparationResult {
  case success(uploadId: Swift.String, imageLocation: OnfleetDriver.FileLocation)
  case failure(_: Foundation.NSError)
}
public protocol AttachmentsDelegate : AnyObject {
  func attachmentsDidStartUploading(_ attachments: OnfleetDriver.AttachmentsManaging)
  func attachments(_ attachments: OnfleetDriver.AttachmentsManaging, didUpdateProgress progress: Swift.Float)
  func attachmentsDidFinishUploading(_ attachments: OnfleetDriver.AttachmentsManaging)
}
public protocol AttachmentsManaging : AnyObject {
  var isUploadingInProgress: Swift.Bool { get }
  var delegate: OnfleetDriver.AttachmentsDelegate? { get set }
  func preparePhotoAttachment(imageUrl: Foundation.URL, taskShortId: Swift.String) -> OnfleetDriver.ImagePreparationResult
  func prepareSignatureAttachment(imageUrl: Foundation.URL, taskShortId: Swift.String) -> OnfleetDriver.ImagePreparationResult
}
open class SingleWorkTaskProcessor<C, S> {
  public var completion: ((C) -> Swift.Void)!
  public func append(subscriber: @escaping (S) -> Swift.Void)
  public init()
  open func createTask() -> OnfleetDriver.WorkTask
  public func createWorkTaskIfNeeded() -> OnfleetDriver.WorkTask
  public func workFinished(_ completionResult: C, subscribersResult: S)
  @objc deinit
}
public struct CompletedTask {
  public var id: Swift.String
  public var shortId: Swift.String
  public var pickupTask: Swift.Bool
  public var completeAfter: Foundation.TimeInterval
  public var completeBefore: Foundation.TimeInterval
  public var completionDetails: OnfleetDriver.CompletedTask.CompletionDetails
  public var notes: Swift.String
  public var locationCoordinate: CoreLocation.CLLocationCoordinate2D
  public var destinationNotes: Swift.String
  public var destinationMetadata: [OnfleetDriver.Metadata]? {
    get
  }
  public var address: OnfleetDriver.Address
  public var wasGeocoded: Swift.Bool
  public var recipient: OnfleetDriver.CompletedTask.RecipientContainer
  public var computed: OnfleetDriver.CompletedTask.ComputedContainer
  public var timeCreated: Foundation.TimeInterval
  public var startTime: Foundation.TimeInterval
  public var timeLastModified: Foundation.TimeInterval
  public var attachments: [OnfleetDriver.CompletedTask.Attachment]
  public var requestedBarcodes: [OnfleetDriver.BarcodeRequest]
  public var capturedBarcodes: [OnfleetDriver.Barcode]
  public var quantity: Swift.Float
  public var requirements: OnfleetDriver.CompletedTask.Requirements
  public var metadata: [OnfleetDriver.Metadata]
  public var isSelfAssigned: Swift.Bool
  public struct Requirements {
    public var signature: Swift.Bool
    public var notes: Swift.Bool
    public var photo: Swift.Bool
    public var minimumAge: Swift.Int
  }
  public struct CompletionDetails {
    public struct Event {
      public var name: Swift.String
      public var time: Foundation.TimeInterval
    }
    public var success: Swift.Bool
    public var notes: Swift.String
    public var failureReason: Swift.String
    public var time: Foundation.TimeInterval
    public var events: [OnfleetDriver.CompletedTask.CompletionDetails.Event]
    public var hasFailureReason: Swift.Bool {
      get
    }
    public var hasNotes: Swift.Bool {
      get
    }
    public var completedByAdmin: Swift.Bool {
      get
    }
  }
  public struct RecipientContainer {
    public var recipientName: Swift.String?
    public var hasRecipients: Swift.Bool
    public var notes: Swift.String?
    public var metadata: [OnfleetDriver.Metadata]? {
      get
    }
  }
  public struct ComputedContainer {
    public var isAvailable: Swift.Bool {
      get
    }
    public var distance: Swift.Double
    public var duration: Swift.Double
  }
  public struct Attachment {
    public var attachmentType: Swift.String
    public var attachmentId: Swift.String
    public var status: Swift.String
  }
}
extension DispatchQueue {
  public func async(after delay: Foundation.TimeInterval, work: @escaping () -> Swift.Void)
  public func once(token: Swift.String, work: () -> Swift.Void)
}
public struct AnalyticsDataState {
  public var isEmpty: Swift.Bool
  public var isOutdated: Swift.Bool
  public var isLoading: Swift.Bool
  public var hasError: Swift.Error?
}
@_hasMissingDesignatedInitializers final public class AnalyticsController {
  @objc deinit
  public static var cacheDirectoryUrl: Foundation.URL?
  public static var enabledPeriods: [OnfleetDriver.AnalyticsPeriod] {
    get
  }
  public static var customPeriodMinDate: Foundation.Date? {
    get
  }
  final public var period: OnfleetDriver.AnalyticsPeriod {
    get
    set
  }
  final public var parameters: OnfleetDriver.AnalyticsPeriodParameters! {
    get
  }
  final public var data: OnfleetDriver.Analytics? {
    get
  }
  final public var state: OnfleetDriver.AnalyticsDataState {
    get
  }
  final public var loadingHandler: ((OnfleetDriver.AnalyticsController, Swift.Bool) -> Swift.Void)?
  final public var dataChangedHandler: ((OnfleetDriver.AnalyticsController, Swift.Bool, Swift.Bool) -> Swift.Void)?
  final public var periodChangedHandler: ((OnfleetDriver.AnalyticsController, OnfleetDriver.AnalyticsPeriod?) -> Swift.Void)? {
    get
    set
  }
  final public func loadDataIfNeeded()
  final public func reloadDataIfNeeded()
  final public func reloadData(completion: ((Swift.Bool) -> Swift.Void)? = nil)
}
public struct Barcode : Swift.Equatable {
  public var symbology: Swift.String
  public var data: Swift.String
  public var wasRequested: Swift.Bool?
  public init(symbology: Swift.String, data: Swift.String, wasRequested: Swift.Bool?)
  public static func == (a: OnfleetDriver.Barcode, b: OnfleetDriver.Barcode) -> Swift.Bool
}
extension Barcode : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
final public class DataStorage {
  @objc deinit
  final public var pathExtension: Swift.String
  final public var excludeFromBackup: Swift.Bool
  public init(destinationDirectoryURL: Foundation.URL, fileManager: Foundation.FileManager = FileManager.default)
  final public func store(data: Foundation.Data, for identifier: Swift.String) throws
  final public func loadData(for identifier: Swift.String) throws -> Foundation.Data?
  final public func remove(for identifier: Swift.String) throws
  final public func removeAll() throws
}
final public class CodableStorage {
  @objc deinit
  final public var excludeFromBackup: Swift.Bool
  public init(storage: OnfleetDriver.DataStorage, completionQueue: Dispatch.DispatchQueue = .main)
  final public func store<T>(model: T, for identifier: Swift.String, completion: ((Swift.Error?) -> Swift.Void)?) where T : Swift.Encodable
  final public func syncStore<T>(model: T, for identifier: Swift.String) throws where T : Swift.Encodable
  final public func load<T>(type: T.Type, for identifier: Swift.String, completion: @escaping (T?, Swift.Error?) -> Swift.Void) where T : Swift.Decodable
  final public func syncLoad<T>(type: T.Type, for identifier: Swift.String) throws -> T? where T : Swift.Decodable
  final public func remove(for identifier: Swift.String, completion: ((Swift.Error?) -> Swift.Void)?)
  final public func syncRemove(for identifier: Swift.String) throws
  final public func removeAll(completion: ((Swift.Error?) -> Swift.Void)?)
}
@objc public enum AuthStatus : Swift.Int {
  case idle
  case busy
  case waiting
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum UpdateProfileError : Swift.Error {
  case phoneNumberInUse(_: OnfleetDriver.APIError)
  case missingProperties(_: OnfleetDriver.APIError)
  case http(_: OnfleetDriver.HTTPError<OnfleetDriver.APIError>)
  public var localizedDescription: Swift.String {
    get
  }
  public var isPhoneNumberInUseError: Swift.Bool {
    get
  }
  public var httpError: OnfleetDriver.HTTPError<OnfleetDriver.APIError>? {
    get
  }
}
final public class SensitiveFilesRemover {
  public init()
  final public func register(subjects: [OnfleetDriver.SensitiveFilesManaging])
  final public func removeAllSensitiveFiles()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class EnvInfo : ObjectiveC.NSObject {
  @objc public static var currentEnvironment: OnfleetDriver.Environment
  @objc public static var currentURLForAPI: Foundation.URL {
    @objc get
  }
  @objc public static var currentURLForWebsockets: Foundation.URL {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers open class AsynchronousOperation : Foundation.Operation {
  public var stateFinished: Swift.Bool {
    get
    set
  }
  public var stateExecuting: Swift.Bool {
    get
    set
  }
  @objc override dynamic public var isFinished: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var isExecuting: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var isAsynchronous: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func main()
  open func execute()
  open func completeOperation()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Destination : OnfleetDriver.Model {
  public var location: OnfleetDriver.EquatableModelProperty<CoreLocation.CLLocation>
  public var address: OnfleetDriver.StringDictionaryModelProperty
  public var notes: OnfleetDriver.EquatableOptionalModelProperty<Swift.String>
  public var wasGeocoded: OnfleetDriver.EquatableModelProperty<Swift.Bool>
  public var metadata: OnfleetDriver.EquatableOptionalModelProperty<[OnfleetDriver.Metadata]>
  public func getLocation() -> CoreLocation.CLLocation
  public func getAddress() -> OnfleetDriver.Address
  public func getNotes() -> Swift.String?
  public func getWasGeocoded() -> Swift.Bool
  public func getMatadata() -> [OnfleetDriver.Metadata]
  @objc deinit
}
public enum FileLocation : Swift.Codable, Swift.CustomDebugStringConvertible {
  case prepared(path: Swift.String)
  public var debugDescription: Swift.String {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension NSNotification.Name {
  public static let driverDidGoOnDuty: Foundation.Notification.Name
  public static let driverDidGoOffDuty: Foundation.Notification.Name
  public static let driverDidGoOffDutyForced: Foundation.Notification.Name
  public static let driverDidStartTask: Foundation.Notification.Name
  public static let driverDidCompleteTask: Foundation.Notification.Name
  public static let driverDidSelfAssignTask: Foundation.Notification.Name
  public static let driverDidNotCompleteTaskReminder: Foundation.Notification.Name
}
public typealias DutyStatusHandler = (Swift.Result<Swift.Void, OnfleetDriver.DutyStatusError>) -> Swift.Void
public typealias UpdateProfileHandler = (Swift.Result<Swift.Void, OnfleetDriver.UpdateProfileError>) -> Swift.Void
public typealias StartTaskHandler = (Swift.Result<Swift.Void, OnfleetDriver.StartTaskError>) -> Swift.Void
public typealias CompleteTaskHandler = (Swift.Result<Swift.Void, OnfleetDriver.CompleteTaskError>) -> Swift.Void
public typealias SelfAssignTaskHandler = (Swift.Result<Swift.Void, OnfleetDriver.SelfAssignTaskError>) -> Swift.Void
public protocol DriverManaging : AnyObject {
  var isOnDuty: Swift.Bool { get }
  var onDuty$: OnfleetDriver.EquatableModelProperty<Swift.Bool> { get }
  var driver: OnfleetDriver.Driver? { get }
  var driverAvailable$: RxSwift.PublishSubject<Swift.Void> { get }
  var isSelfAssignmentEnabled: Swift.Bool { get }
  var isTaskOrderEnforced: Swift.Bool { get }
  var isDriverCommunicationEnabled: Swift.Bool { get }
  func setDutyStatus(goOnDuty: Swift.Bool, completion: @escaping OnfleetDriver.DutyStatusHandler)
  func uploadProfileImage(imageUrl: Foundation.URL, progress: @escaping (Swift.Float) -> Swift.Void, completion: @escaping (Swift.Result<Swift.String, Swift.Error>) -> Swift.Void)
  func updateProfile(details: OnfleetDriver.DriverProfileDetails, completion: @escaping OnfleetDriver.UpdateProfileHandler)
  func isBarcodeScanningRequired(for task: OnfleetDriver.Task) -> Swift.Bool
  var isBarcodeScanningEnabled: Swift.Bool { get }
  func isAgeVerificationRequired(for task: OnfleetDriver.Task) -> Swift.Bool
  var isAgeVerificationEnabled: Swift.Bool { get }
  func isPhotoLibraryEnabled(for task: OnfleetDriver.Task) -> Swift.Bool
  func isNotesOnCompletionEnabled(for task: OnfleetDriver.Task) -> Swift.Bool
  func isNotesOnCompletionRequired(for task: OnfleetDriver.Task) -> Swift.Bool
  func isPhotoAttachmentOnCompletionEnabled(for task: OnfleetDriver.Task) -> Swift.Bool
  func isPhotoAttachmentOnCompletionRequired(for task: OnfleetDriver.Task) -> Swift.Bool
  func isSignatureAttachmentOnCompletionEnabled(for task: OnfleetDriver.Task) -> Swift.Bool
  func isSignatureAttachmentOnCompletionRequired(for task: OnfleetDriver.Task) -> Swift.Bool
  func shouldWarnIfTaskStartedBeforeCompleteAfter(for task: OnfleetDriver.Task) -> Swift.Bool
  func shouldWarnOnOptionalNotesAttachment(for task: OnfleetDriver.Task) -> Swift.Bool
  func shouldWarnOnOptionalPhotoAttachment(for task: OnfleetDriver.Task) -> Swift.Bool
  func shouldWarnOnOptionalSignatureAttachment(for task: OnfleetDriver.Task) -> Swift.Bool
  var activeTask: OnfleetDriver.Task? { get }
  var tasksTouched$: RxSwift.PublishSubject<Swift.Void> { get set }
  func start(task: OnfleetDriver.Task, completion: @escaping OnfleetDriver.StartTaskHandler)
  func complete(task: OnfleetDriver.Task, completionDetails: OnfleetDriver.TaskCompletionDetails, completion: @escaping OnfleetDriver.CompleteTaskHandler)
  func selfAssign(task: OnfleetDriver.Task, completion: @escaping OnfleetDriver.SelfAssignTaskHandler)
  var selfAssignableTasks: [OnfleetDriver.Task] { get }
  func completedTasks(from: Foundation.TimeInterval, completion: () -> Swift.Void)
  var isChatEnabled: Swift.Bool { get }
  var isZendriveEnabled: Swift.Bool { get }
  var zendriveKey: Swift.String? { get }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class Account : ObjectiveC.NSObject, Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case status
    case organizationId, organizationName, organizationImage
    case userId, userPhoneNumber, userOnDuty
    case accessToken, refreshToken
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  @objc public var organizationId: Swift.String
  @objc public var organizationName: Swift.String
  @objc public var userId: Swift.String
  @objc public var userPhoneNumber: Swift.String
  @objc public var userOnDuty: Swift.Bool
  @objc public var accessToken: Swift.String?
  @objc public var refreshToken: Swift.String?
  @objc public var status: Swift.String
  @objc public var isPending: Swift.Bool {
    @objc get
  }
  @objc public var isAccepted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var isRejected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var organizationImageUrl: Foundation.URL? {
    @objc get
  }
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
public enum RemoteNotification {
  case taskAssignment
  case taskUnassignment
  case taskUpdate
  public static func == (a: OnfleetDriver.RemoteNotification, b: OnfleetDriver.RemoteNotification) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension OnfleetDriver.HmacSignature.Algorithm : Swift.Equatable {}
extension OnfleetDriver.HmacSignature.Algorithm : Swift.Hashable {}
extension OnfleetDriver.HmacSignature.Error : Swift.Equatable {}
extension OnfleetDriver.HmacSignature.Error : Swift.Hashable {}
extension OnfleetDriver.VehicleType : Swift.Equatable {}
extension OnfleetDriver.VehicleType : Swift.Hashable {}
extension OnfleetDriver.VehicleType : Swift.RawRepresentable {}
extension OnfleetDriver.UserConsent : Swift.Equatable {}
extension OnfleetDriver.UserConsent : Swift.Hashable {}
extension OnfleetDriver.UserConsent : Swift.RawRepresentable {}
extension OnfleetDriver.Environment : Swift.Equatable {}
extension OnfleetDriver.Environment : Swift.Hashable {}
extension OnfleetDriver.Environment : Swift.RawRepresentable {}
extension OnfleetDriver.RecipientContactMode : Swift.Equatable {}
extension OnfleetDriver.RecipientContactMode : Swift.Hashable {}
extension OnfleetDriver.LogoutReason : Swift.Equatable {}
extension OnfleetDriver.LogoutReason : Swift.Hashable {}
extension OnfleetDriver.LogoutReason : Swift.RawRepresentable {}
extension OnfleetDriver.InvitationResponse : Swift.Equatable {}
extension OnfleetDriver.InvitationResponse : Swift.Hashable {}
extension OnfleetDriver.InvitationResponse : Swift.RawRepresentable {}
extension OnfleetDriver.UnitSystem : Swift.Equatable {}
extension OnfleetDriver.UnitSystem : Swift.Hashable {}
extension OnfleetDriver.Metadata.ValueType : Swift.Equatable {}
extension OnfleetDriver.Metadata.ValueType : Swift.Hashable {}
extension OnfleetDriver.Metadata.ValueType : Swift.RawRepresentable {}
extension OnfleetDriver.Metadata.Visibility : Swift.Equatable {}
extension OnfleetDriver.Metadata.Visibility : Swift.Hashable {}
extension OnfleetDriver.Metadata.Visibility : Swift.RawRepresentable {}
extension OnfleetDriver.AuthStatus : Swift.Equatable {}
extension OnfleetDriver.AuthStatus : Swift.Hashable {}
extension OnfleetDriver.AuthStatus : Swift.RawRepresentable {}
extension OnfleetDriver.Account.CodingKeys : Swift.Equatable {}
extension OnfleetDriver.Account.CodingKeys : Swift.Hashable {}
extension OnfleetDriver.Account.CodingKeys : Swift.RawRepresentable {}
extension OnfleetDriver.RemoteNotification : Swift.Equatable {}
extension OnfleetDriver.RemoteNotification : Swift.Hashable {}
