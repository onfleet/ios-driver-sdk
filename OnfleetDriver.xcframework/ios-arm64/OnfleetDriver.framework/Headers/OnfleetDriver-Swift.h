// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef ONFLEETDRIVER_SWIFT_H
#define ONFLEETDRIVER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OnfleetDriver",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSNumber;
@class NSURL;

/// A model representing an organization account in <code>SessionManaging</code>.
/// Account can have multiple states. If driver is invited into an org, account is in INVITED state and
/// <code>isPending</code> returns true. Driver can either accept or reject invitation. If account is accepted this
/// account is set to ACCEPTED and <code>isAccepted</code> returns true; REJECTED and <code>isRejected</code>
/// respectively. Pending or rejected accounts can’t go on duty, start tasks, etc. Refer to
/// <code>SessionManaging</code> for more info.
SWIFT_CLASS("_TtC13OnfleetDriver7Account")
@interface Account : NSObject
@property (nonatomic, copy) NSString * _Nonnull organizationId;
@property (nonatomic, copy) NSString * _Nonnull organizationName;
@property (nonatomic, copy) NSString * _Nonnull userId;
@property (nonatomic, copy) NSString * _Nonnull userPhoneNumber;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nullable accessToken;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nullable refreshToken;
/// Status of the account. Possible values (INVITED, ACCEPTED, DECLINED)
@property (nonatomic, copy) NSString * _Nonnull status;
/// Returns true if account is invited but user has not accepted or rejected yet; false otherwise.
@property (nonatomic, readonly) BOOL isPending;
/// Returns true if account is accepted.
@property (nonatomic) BOOL isAccepted;
/// Returns true if account is rejected.
@property (nonatomic) BOOL isRejected;
/// Returns an url of org’s image; nil if org has no image.
@property (nonatomic, readonly, copy) NSURL * _Nullable organizationImageUrl;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Provides primitives for wrapping Operation with asynchronous code that can
/// be enqueued in a OperationQueue and run serially or concurently.
/// Subclasses should override execute() function and run their task. When completed
/// completeOperation() func must be called.
SWIFT_CLASS("_TtC13OnfleetDriver21AsynchronousOperation")
@interface AsynchronousOperation : NSOperation
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
- (void)main;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An Operation that supports adding asynchronous closures.
/// You must explicitly call operation.completeOperation() in your
/// closure when you are done with your work.
/// warning:
/// Your closure might not be called when operation was cancelled,
/// this functionality is not implemented yet!
SWIFT_CLASS("_TtC13OnfleetDriver28AsynchronousClosureOperation")
@interface AsynchronousClosureOperation : AsynchronousOperation
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// A SDK configuration object.
/// Pass this object into SDK init method.
/// See <code>DriverContext.initSDK(with:environment:app:loggers:)</code>
SWIFT_CLASS("_TtC13OnfleetDriver6Config")
@interface Config : NSObject
/// Unique identifier of host application. This has to be obtained from Onfleet.
@property (nonatomic, readonly, copy) NSString * _Nonnull appKey;
/// Version of host application.
@property (nonatomic, readonly, copy) NSString * _Nonnull appVersion;
/// Name of host application.
@property (nonatomic, readonly, copy) NSString * _Nonnull appName;
- (nonnull instancetype)initWithAppKey:(NSString * _Nonnull)appKey appVersion:(NSString * _Nonnull)appVersion appName:(NSString * _Nonnull)appName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13OnfleetDriver5Model")
@interface Model : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13OnfleetDriver11Destination")
@interface Destination : Model
@end


SWIFT_CLASS("_TtC13OnfleetDriver9DiskUtils")
@interface DiskUtils : NSObject
/// Returns false if free space is less than 10MB, this means that operations with moderately large files will not work (images, etc.).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL diskHasFreeSpaceForImportantOperations;)
+ (BOOL)diskHasFreeSpaceForImportantOperations SWIFT_WARN_UNUSED_RESULT;
/// Returns false if free space is less than 3MB, this means that most of disk operations will not work.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL diskHasFreeSpaceForCriticalOperations;)
+ (BOOL)diskHasFreeSpaceForCriticalOperations SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) uint64_t diskFreeSpace;)
+ (uint64_t)diskFreeSpace SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull applicationSupportPath;)
+ (NSString * _Nonnull)applicationSupportPath SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull applicationSupportURL;)
+ (NSURL * _Nonnull)applicationSupportURL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull bundleApplicationSupportURL;)
+ (NSURL * _Nonnull)bundleApplicationSupportURL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull libraryURL;)
+ (NSURL * _Nonnull)libraryURL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull documentsPath;)
+ (NSString * _Nonnull)documentsPath SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull documentsURL;)
+ (NSURL * _Nonnull)documentsURL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull cachesPath;)
+ (NSString * _Nonnull)cachesPath SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull cachesURL;)
+ (NSURL * _Nonnull)cachesURL SWIFT_WARN_UNUSED_RESULT;
/// bundle specific directory in app Caches.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull bundleCachesURL;)
+ (NSURL * _Nonnull)bundleCachesURL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull temporaryPath;)
+ (NSString * _Nonnull)temporaryPath SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull temporaryURL;)
+ (NSURL * _Nonnull)temporaryURL SWIFT_WARN_UNUSED_RESULT;
/// Returns the container directory associated with the application group identifier.
+ (NSURL * _Nonnull)sharedContainerURLFor:(NSString * _Nonnull)appGroupId SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)excludeFromBackupForItemAt:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


enum Environment : NSInteger;

SWIFT_CLASS("_TtC13OnfleetDriver7EnvInfo")
@interface EnvInfo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum Environment currentEnvironment;)
+ (enum Environment)currentEnvironment SWIFT_WARN_UNUSED_RESULT;
+ (void)setCurrentEnvironment:(enum Environment)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull currentURLForAPI;)
+ (NSURL * _Nonnull)currentURLForAPI SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull currentURLForWebsockets;)
+ (NSURL * _Nonnull)currentURLForWebsockets SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, Environment, open) {
  EnvironmentProduction = 100,
  EnvironmentStaging = 101,
  EnvironmentLocalhost = 102,
};

@class NSBundle;

/// Public acess to framework’s info.plist
SWIFT_CLASS("_TtC13OnfleetDriver13FrameworkInfo")
@interface FrameworkInfo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull frameworkBundle;)
+ (NSBundle * _Nonnull)frameworkBundle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull formattedVersion;)
+ (NSString * _Nonnull)formattedVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bundleId;)
+ (NSString * _Nonnull)bundleId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionLong;)
+ (NSString * _Nonnull)versionLong SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionShort;)
+ (NSString * _Nonnull)versionShort SWIFT_WARN_UNUSED_RESULT;
+ (NSURL * _Nonnull)httpBaseURLFor:(enum Environment)environment SWIFT_WARN_UNUSED_RESULT;
+ (NSURL * _Nonnull)wsBaseURLFor:(enum Environment)environment SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull appGroupId;)
+ (NSString * _Nonnull)appGroupId SWIFT_WARN_UNUSED_RESULT;
+ (void)setAppGroupId:(NSString * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Provides easy internal access and convenience methods to InfoDictionary
SWIFT_CLASS("_TtC13OnfleetDriver9InfoPlist")
@interface InfoPlist : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull bundle;)
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
/// General func to obtain URL value from info.plist file
+ (NSURL * _Nonnull)URLFor:(NSString * _Nonnull)key in:(NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
/// General func to obtain string value from info.plist file
+ (NSString * _Nonnull)stringForKey:(NSString * _Nonnull)key in:(NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)dictionaryForKey:(NSString * _Nonnull)key in:(NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)bundleIdIn:(NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)bundleNameIn:(NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)versionIn:(NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)shortVersionIn:(NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end










/// Wraps the observer token received from
/// NotificationCenter.addObserver(forName:object:queue:using:)
/// and unregisters it in deinit.
SWIFT_CLASS("_TtC13OnfleetDriver17NotificationToken")
@interface NotificationToken : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A model object representing an organization in which driver is assigned.
SWIFT_CLASS("_TtC13OnfleetDriver12Organization")
@interface Organization : Model
@end






SWIFT_CLASS("_TtC13OnfleetDriver9Recipient")
@interface Recipient : Model
@end


/// An observable model object representing an assigned or active task.
/// See <code>CompletedTask</code> for completed task model object.
SWIFT_CLASS("_TtC13OnfleetDriver4Task")
@interface Task : Model
@end









typedef SWIFT_ENUM(NSInteger, UserConsent, open) {
  UserConsentNotDetermined = 0,
  UserConsentGranted = 1,
  UserConsentDenied = 2,
};


/// An observable model for driver’s vehicle.
SWIFT_CLASS("_TtC13OnfleetDriver7Vehicle")
@interface Vehicle : Model
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
